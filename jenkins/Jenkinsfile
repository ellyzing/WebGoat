pipeline {
   agent {
     node {
      label 'TestNode' 
   }
}
stages {
    
    stage('Checkout') {
    steps {
    	echo 'step Git Checkout'
		checkout scm
        }
    }
    stage('Build') {
        steps {
        sh 'chmod +x ./mvnw'
        sh './mvnw clean install' 
        }
    }
    stage ('Analysis') {
        def mvnHome = tool 'mvn-default'

        sh "${mvnHome}/bin/mvn --batch-mode -V -U -e checkstyle:checkstyle pmd:pmd pmd:cpd findbugs:findbugs"

        def checkstyle = scanForIssues tool: checkStyle(pattern: '**/target/checkstyle-result.xml')
        publishIssues issues: [checkstyle]
   
        def pmd = scanForIssues tool: pmdParser(pattern: '**/target/pmd.xml')
        publishIssues issues: [pmd]
        
        def cpd = scanForIssues tool: cpd(pattern: '**/target/cpd.xml')
        publishIssues issues: [cpd]
        
        def spotbugs = scanForIssues tool: spotBugs(pattern: '**/target/findbugsXml.xml')
        publishIssues issues: [spotbugs]

        def maven = scanForIssues tool: mavenConsole()
        publishIssues issues: [maven]
        
        publishIssues id: 'analysis', name: 'All Issues', 
            issues: [checkstyle, pmd, spotbugs], 
            filters: [includePackage('io.jenkins.plugins.analysis.*')]
    }
    stage('FindBug') {
        steps{
            recordIssues aggregatingResults: true, tools: [findBugs(useRankAsPriority: true)]
        }
    }
        stage("OWASP Dependency-Check Vulnerabilities") {
          steps {
            configFileProvider([configFile(fileId: 'uuid', targetLocation: 'proxy.properties')]) {
              dependencyCheck additionalArguments: '''
                -f "ALL"
                -o "reports"
                -P "proxy.properties"
                --suppression "dependency-check-known-issues.xml"
                --disableAssembly
                --disableYarnAudit
                --failOnCVSS 7''', odcInstallation: 'OWASP-DC'
            }
        }
    }

}
}
